name: Build Chart Preview

on:
  push:
    branches: [ main, develop, refac ]
  pull_request:
    branches: [ main, develop, refac ]
  release:
    types: [ created ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Cache JUCE
      uses: actions/cache@v3
      with:
        path: |
          Chart Preview/Builds
          Chart Preview/JuceLibraryCode
        key: ${{ runner.os }}-juce-${{ hashFiles('Chart Preview/ChartPreview.jucer') }}
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Generate Visual Studio project with Projucer
      shell: cmd
      run: |
        cd "Chart Preview"
        echo "Generating Visual Studio 2022 project files..."
        if exist "ChartPreview.jucer" (
          echo "Found ChartPreview.jucer"
          echo "Checking if Projucer is available in PATH..."
          where projucer >nul 2>&1 && (
            echo "Using Projucer from PATH"
            projucer --resave "ChartPreview.jucer"
          ) || (
            echo "Projucer not in PATH, checking if VS project already exists..."
            if exist "Builds\VisualStudio2022\ChartPreview.sln" (
              echo "Using existing Visual Studio solution"
            ) else (
              echo "No Visual Studio solution found and Projucer not available"
              echo "Please ensure Projucer is available or commit the generated project files"
              exit /b 1
            )
          )
        ) else (
          echo "ChartPreview.jucer not found"
          exit /b 1
        )

    - name: Build with MSBuild
      shell: cmd
      run: |
        cd "Chart Preview"
        echo "Building Release configuration..."
        msbuild "Builds/VisualStudio2022/ChartPreview.sln" /p:Configuration=Release /p:Platform=x64 /m /verbosity:minimal
        echo "Build completed, checking output..."
        if exist "Builds\VisualStudio2022\x64\Release\VST3" (
          dir "Builds\VisualStudio2022\x64\Release\VST3" /s
        ) else (
          echo "VST3 output directory not found"
          dir "Builds\VisualStudio2022\x64\Release" /s
        )
        
    - name: Verify build artifacts
      shell: cmd
      run: |
        cd "Chart Preview"
        echo "Checking for VST3 files..."
        if exist "Builds\VisualStudio2022\x64\Release\VST3\ChartPreview.vst3" (
          echo "✅ VST3 build found"
          dir "Builds\VisualStudio2022\x64\Release\VST3\ChartPreview.vst3" /s
        ) else if exist "Builds\VisualStudio2022\x64\Release\VST3\Chart Preview.vst3" (
          echo "✅ VST3 build found (with space in name)"
          dir "Builds\VisualStudio2022\x64\Release\VST3\Chart Preview.vst3" /s
        ) else (
          echo "❌ VST3 build not found"
          dir "Builds\VisualStudio2022\x64\Release" /s
          exit /b 1
        )
        
    - name: Upload Windows VST3 artifact
      uses: actions/upload-artifact@v3
      with:
        name: ChartPreview-VST3-Windows-x64
        path: |
          Chart Preview/Builds/VisualStudio2022/x64/Release/VST3/
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Cache JUCE
      uses: actions/cache@v3
      with:
        path: |
          Chart Preview/Builds
          Chart Preview/JuceLibraryCode
        key: ${{ runner.os }}-juce-${{ hashFiles('Chart Preview/ChartPreview.jucer') }}
        restore-keys: |
          ${{ runner.os }}-juce-
          
    - name: Generate Xcode project with Projucer
      run: |
        cd "Chart Preview"
        echo "Generating Xcode project files..."
        if [ -f "ChartPreview.jucer" ]; then
          echo "Found ChartPreview.jucer"
          # Check if Projucer is available
          if command -v projucer &> /dev/null; then
            echo "Using Projucer from PATH"
            projucer --resave "ChartPreview.jucer"
          else
            echo "Projucer not in PATH, checking if Xcode project already exists..."
            if [ -f "Builds/MacOSX/ChartPreview.xcodeproj/project.pbxproj" ]; then
              echo "Using existing Xcode project"
            else
              echo "No Xcode project found and Projucer not available"
              echo "Checking if old project structure exists..."
              if [ -f "Chart Preview.xcodeproj/project.pbxproj" ]; then
                echo "Using project in root directory"
              else
                echo "No valid Xcode project found"
                exit 1
              fi
            fi
          fi
        else
          echo "ChartPreview.jucer not found"
          exit 1
        fi

    - name: Build with xcodebuild
      run: |
        cd "Chart Preview"
        echo "Building Release configuration..."
        
        # Try different possible project locations
        if [ -f "Builds/MacOSX/ChartPreview.xcodeproj/project.pbxproj" ]; then
          echo "Building from Builds/MacOSX/ChartPreview.xcodeproj"
          xcodebuild -project "Builds/MacOSX/ChartPreview.xcodeproj" -scheme "ChartPreview - VST3" -configuration Release -derivedDataPath "Builds/MacOSX/DerivedData" build
        elif [ -f "Chart Preview.xcodeproj/project.pbxproj" ]; then
          echo "Building from Chart Preview.xcodeproj"
          xcodebuild -project "Chart Preview.xcodeproj" -scheme "Chart Preview - VST3" -configuration Release build
        else
          echo "No valid Xcode project found"
          exit 1
        fi
        
    - name: Verify build artifacts
      run: |
        cd "Chart Preview"
        echo "Checking for VST3 files..."
        
        # Check different possible output locations
        VST3_FOUND=false
        
        if [ -d "Builds/MacOSX/DerivedData/Build/Products/Release/ChartPreview.vst3" ]; then
          echo "✅ VST3 build found in DerivedData"
          ls -la "Builds/MacOSX/DerivedData/Build/Products/Release/"
          VST3_FOUND=true
        elif [ -d "Builds/MacOSX/build/Release/Chart Preview.vst3" ]; then
          echo "✅ VST3 build found in build/Release"
          ls -la "Builds/MacOSX/build/Release/"
          VST3_FOUND=true
        elif [ -d "build/Release/Chart Preview.vst3" ]; then
          echo "✅ VST3 build found in root build"
          ls -la "build/Release/"
          VST3_FOUND=true
        else
          echo "❌ VST3 build not found, checking all possible locations..."
          find . -name "*.vst3" -type d 2>/dev/null || echo "No VST3 files found"
          exit 1
        fi
        
    - name: Upload macOS VST3 artifact
      uses: actions/upload-artifact@v3
      with:
        name: ChartPreview-VST3-macOS
        path: |
          Chart Preview/Builds/MacOSX/DerivedData/Build/Products/Release/*.vst3
          Chart Preview/Builds/MacOSX/build/Release/*.vst3
          Chart Preview/build/Release/*.vst3
        retention-days: 30

  # Create release if this is a tag
  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v3
      with:
        name: ChartPreview-VST3-Windows-x64
        path: ./windows-vst3/
        
    - name: Download macOS artifacts  
      uses: actions/download-artifact@v3
      with:
        name: ChartPreview-VST3-macOS
        path: ./macos-vst3/
        
    - name: Create release archives
      run: |
        # Create Windows release archive
        cd windows-vst3 && zip -r ../ChartPreview-VST3-Windows-x64.zip . && cd ..
        
        # Create macOS release archive  
        cd macos-vst3 && zip -r ../ChartPreview-VST3-macOS.zip . && cd ..
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ChartPreview-VST3-Windows-x64.zip
          ChartPreview-VST3-macOS.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}